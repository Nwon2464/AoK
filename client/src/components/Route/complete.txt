import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import _ from "lodash";
import { Link } from "react-router-dom";
import MoreVertIcon from "@material-ui/icons/MoreVert";

import InfiniteScroll from "react-infinite-scroll-component";


import BodyLeft from "../Body/BodyLeft";
import NotFound from "../error/NotFound";
import FavoriteBorderOutlinedIcon from "@material-ui/icons/FavoriteBorderOutlined";
import SlashCategoryGamesIdLoading from "./ReuseableUI/SlashCategoryGamesIdLoading";
import { checkViewers, checkFollowers } from "../Body/checkViewers";
const SlashCategoryGamesId = (props) => {
  //how pagination works, 
  //in lp, fetch data from server, receive data from server and set pagination value
  //in the next subsequent request(user reached bottom of the page), fetch again with pagination value at the body of params
  //from server, you can receive it in query param. if there is query param, add it in url
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetch initial data
    fetchPosts(0);
  }, []);

  const fetchPosts = async (offset) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/posts?_start=${offset}&_limit=20`
      );
      if (!response.ok) {
        throw new Error("Failed to fetch posts");
      }
      const newPosts = await response.json();
      setPosts((prevPosts) => [...prevPosts, ...newPosts]);
      setHasMore(newPosts.length > 0); // JSONPlaceholder has 100 posts; stop fetching after that
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    const handleScroll = () => {
      // console.log(window.innerHeight , window.scrollY, document.documentElement.scrollHeight);
      const bottom = Math.ceil(window.innerHeight + window.scrollY) >= document.documentElement.scrollHeight

      if (bottom) {
        if (!loading && hasMore) {
          console.log("you reach the bottom", window.innerHeight);
          fetchPosts(posts.length); // Fetch next batch of posts
        }
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [loading, hasMore, posts.length]);


  return (
    <div>
      <h1>JSONPlaceholder Posts</h1>
      <ul id="header" >
        {posts.map((post) => (
          <li key={post.id} >
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
      {loading && <p>Loading...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}
      {!hasMore && <p>No more posts to load</p>}
    </div>
  );
};

export default SlashCategoryGamesId;
